services:
  spark-iceberg:
    image: tabulario/spark-iceberg
    container_name: spark-iceberg
    volumes:
      - type: bind
        source: spark-iceberg/conf
        target: /opt/spark/conf
    networks:
      minilake_net:
    depends_on:
      - iceberg-rest
      - minio
    environment:
      - SPARK_HOME=/opt/spark
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
    ports:
      - 8888:8888
      - 8080:8080
      - 10000:10000
      - 10001:10001
  iceberg-rest:
    image: tabulario/iceberg-rest
    container_name: iceberg-rest
    networks:
      minilake_net:
    ports:
      - 8181:8181
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
      - CATALOG_WAREHOUSE=s3://minilake/
      - CATALOG_IO__IMPL=org.apache.iceberg.aws.s3.S3FileIO
      - CATALOG_S3_ENDPOINT=http://minio:9000
  minio:
    image: minio/minio
    container_name: minio
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
      - MINIO_DOMAIN=minio
    networks:
      minilake_net:
        aliases:
          - minilake.minio
    ports:
      - 9001:9001
      - 9000:9000
    command: ["server", "/data", "--console-address", ":9001"]
  mc:
    depends_on:
      - minio
    image: minio/mc
    container_name: mc
    networks:
      minilake_net:
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
    entrypoint: >
      /bin/sh -c "
      until (/usr/bin/mc config host add minio http://minio:9000 admin password) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc rm -r --force minio/minilake;
      /usr/bin/mc mb minio/minilake;
      /usr/bin/mc policy set public minio/minilake;
      tail -f /dev/null
      "
networks:
  minilake_net: